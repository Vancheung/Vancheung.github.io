[ { "title": "", "url": "/posts/2021-09-07-Python%E8%BF%9B%E9%98%B6-UI%E8%87%AA%E5%8A%A8%E5%8C%96%E6%A1%86%E6%9E%B6%E4%B8%AD%E7%94%A8%E5%88%B0%E7%9A%84Python%E8%BF%9B%E9%98%B6%E7%89%B9%E6%80%A7/", "categories": "", "tags": "", "date": "2021-09-08 09:59:37 +0800", "snippet": "一、抽象类在实现UI自动化框架时，存在一个常见的情况，Android和iOS封装相同的接口，从而实现用例的一致性，如下是一个简单的示例：class AndroidClient: def open_app(self): # some code class IosClient: def open_app(self): # some codeif __name__ == &quot;__main__&quot;: if platform==&quot;android&quot;: client = AndroidClie..." }, { "title": "【Day 6】关于我是如何干掉Appium和RobotFramework这件事的——使用sphinx自动生成API文档", "url": "/posts/Day-6-%E5%85%B3%E4%BA%8E%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E5%B9%B2%E6%8E%89Appium%E5%92%8CRobotFramework%E8%BF%99%E4%BB%B6%E4%BA%8B%E7%9A%84-%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90API%E6%96%87%E6%A1%A3/", "categories": "客户端自动化, 框架设计", "tags": "python, 自动化, iOS, Android, Appium", "date": "2021-08-02 17:00:00 +0800", "snippet": "一、安装sphinx1、创建新项目pip install sphinxmkdir doccd doc/sphinx-quickstart&amp;gt; Separate source and build directories (y/n) [n]: y&amp;gt; Project name: ClientEngine&amp;gt; Author name(s): Van&amp;gt; Project release []: &amp;gt; Project language [en]: zh_CN2、编译html文件sphinx-build -b html ./source ...." }, { "title": "【Day 5】关于我是如何干掉Appium和RobotFramework这件事的——python-wda查找速度优化", "url": "/posts/Day-5-%E5%85%B3%E4%BA%8E%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E5%B9%B2%E6%8E%89Appium%E5%92%8CRobotFramework%E8%BF%99%E4%BB%B6%E4%BA%8B%E7%9A%84-python-wda%E6%9F%A5%E6%89%BE%E9%80%9F%E5%BA%A6%E4%BC%98%E5%8C%96/", "categories": "客户端自动化, 框架设计", "tags": "python, 自动化, iOS, Android, Appium", "date": "2021-07-08 18:00:00 +0800", "snippet": "一、一次定位操作背后发生了什么# 初始化wda_clientimport wdawda_client = wda.Client()# 调用查找元素self.wda_client(label=&#39;登录&#39;)这个行为会调用BaseClient类的__call__方法，返回一个Selector对象class BaseClient(object) def __init__(self, url=None, _session_id=None): self.__timeout = 30.0 def __call__(self, *args, *..." }, { "title": "【Day 4】关于我是如何干掉Appium和RobotFramework这件事的——PO有向图", "url": "/posts/Day-4-%E5%85%B3%E4%BA%8E%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E5%B9%B2%E6%8E%89Appium%E5%92%8CRobotFramework%E8%BF%99%E4%BB%B6%E4%BA%8B%E7%9A%84-PO%E6%9C%89%E5%90%91%E5%9B%BE/", "categories": "客户端自动化, 框架设计", "tags": "python, 自动化, iOS, Android, Appium", "date": "2021-06-28 18:00:00 +0800", "snippet": "一、问题背景先写一个简单的登录Actionclass UiClient: def __init__(self): self.client = wda.client() def login(self,username,password): self.client.input(帐号输入框, username) self.client.input(密码输入框, password) self.client.click(登录)if __name__ == &#39;__main__&#39;: ui = UiClient()..." }, { "title": "【Python基础】为什么pip安装过的库，在import的时候还是报错——Python虚拟环境介绍", "url": "/posts/Python%E5%9F%BA%E7%A1%80-%E4%B8%BA%E4%BB%80%E4%B9%88pip%E5%AE%89%E8%A3%85%E8%BF%87%E7%9A%84%E5%BA%93-%E5%9C%A8import%E7%9A%84%E6%97%B6%E5%80%99%E8%BF%98%E6%98%AF%E6%8A%A5%E9%94%99-Python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E4%BB%8B%E7%BB%8D/", "categories": "Python编程, Python基础", "tags": "python, pip, venv, 旧文搬运", "date": "2021-06-18 14:00:00 +0800", "snippet": "【问题描述】最近收到一些同事们的疑问，为什么使用pip安装后的库，在PyCharm导入的时候还是会报 ModuleNotFoundError: No module named ‘xxx’如果只想简单粗暴的解决问题，以下方法二选一：（1）在当前项目下打开Terminal窗口，重新pip安装一次对应的库（2）在Preferences中修改当前项目的Python Interpreter为系统的python路径但知其然在此处，还是总结一下为什么会出现这种问题，以及如何选择更合适自己的解决方法。【原理详解】1、解释器（Interpreter）Python是一门解释型语言，不需要编译和链接，代码在运..." }, { "title": "【Day 3】关于我是如何干掉Appium和RobotFramework这件事的——Android自动化", "url": "/posts/Day-3-%E5%85%B3%E4%BA%8E%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E5%B9%B2%E6%8E%89Appium%E5%92%8CRobotFramework%E8%BF%99%E4%BB%B6%E4%BA%8B%E7%9A%84-Android%E8%87%AA%E5%8A%A8%E5%8C%96/", "categories": "客户端自动化, 框架设计", "tags": "python, 自动化, iOS, Android, Appium", "date": "2021-06-15 14:00:00 +0800", "snippet": "什么是uiautomator2​ 摘抄一段来自 uiautomator2 官方文档的介绍： UiAutomator是Google提供的用来做安卓自动化测试的一个Java库，基于Accessibility服务。功能很强，可以对第三方App进行测试，获取屏幕上任意一个APP的任意一个控件属性，并对其进行任意操作，但有两个缺点：1. 测试脚本只能使用Java语言 2. 测试脚本要打包成jar或者apk包上传到设备上才能运行。 我们希望测试逻辑能够用Python编写，能够在电脑上运行的时候就控制手机。这里要非常感谢 Xiaocong He (@xiaocong)，他将这个想法实现了出来（见x..." }, { "title": "【Day 2】关于我是如何干掉Appium和RobotFramework这件事的——iOS自动化", "url": "/posts/Day-2-%E5%85%B3%E4%BA%8E%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E5%B9%B2%E6%8E%89Appium%E5%92%8CRobotFramework%E8%BF%99%E4%BB%B6%E4%BA%8B%E7%9A%84-iOS%E8%87%AA%E5%8A%A8%E5%8C%96/", "categories": "客户端自动化, 框架设计", "tags": "python, 自动化, iOS, Android, Appium", "date": "2021-06-14 14:00:00 +0800", "snippet": "​ 提到iOS自动化，必然绕不开的一个工具就是WebDriverAgent（后文简称 WDA），后续iOS自动化的设计也将围绕WDA进行。什么是WDA​ WebDriverAgent是Facebook制作的一款开源移动测试框架，支持真机和模拟器，官方Readme的介绍如下： WebDriverAgent 在 iOS 端实现了一个 WebDriver server ，借助这个 server 我们可以远程控制 iOS 设备。你可以启动、杀死应用，点击、滚动视图，或者确定页面展示是否正确。它是 iOS 上一个完美的 e2e 的自动化解决方案，链接XCTest.framework调用苹果的 A..." }, { "title": "【Day 1】关于我是如何干掉Appium和RobotFramework这件事的——环境准备", "url": "/posts/Day-1-%E5%85%B3%E4%BA%8E%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E5%B9%B2%E6%8E%89Appium%E5%92%8CRobotFramework%E8%BF%99%E4%BB%B6%E4%BA%8B%E7%9A%84-%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/", "categories": "客户端自动化, 框架设计", "tags": "python, 自动化, iOS, Android, Appium", "date": "2021-06-11 10:00:00 +0800", "snippet": "工具安装虽说工欲善其事，必先利其器，但准备环境的文档在互联网上以多如牛毛，不再赘述。在此，只记录下需要准备的内容有哪些。一个好用的Python IDE个人习惯使用PyCharm， VS Code也是不错的选择。Xcode​ 在Mac上运行本工程，涉及iOS和Mac OS自动化，必须要安装Xcode。建议使用最新稳定版本，并更新全量iOS Support Files，更新方法：git clone https://github.com/iGhibli/iOS-DeviceSupport.gitcd iOS-DeviceSupport/sudo ./deploy.py​ 当iOS有新的系统版本..." }, { "title": "【Day 0】关于我是如何干掉Appium和RobotFramework这件事的——开篇", "url": "/posts/Day-0-%E5%85%B3%E4%BA%8E%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E5%B9%B2%E6%8E%89Appium%E5%92%8CRobotFramework%E8%BF%99%E4%BB%B6%E4%BA%8B%E7%9A%84-%E5%BC%80%E7%AF%87/", "categories": "客户端自动化, 框架设计", "tags": "python, 自动化, iOS, Android, Appium", "date": "2021-06-10 14:00:00 +0800", "snippet": "​ 起了个比较大的标题，我终于也变成了自己所不齿的那种标题党。还是解释一下，最近接手了一个项目，需要优化客户端自动化测试框架，而当前的自动化测试框架是基于Appium和RobotFramework。所以严谨一点来说，是在此记录一下，如何从现有自动化工程中解耦Appium和RobotFramework。毕竟它们经历了这么多年的发展，远非我一人的智慧能及，新的设计并不能取代这两个框架的地位。​ 本人才疏学浅，文中难免存在浅显错漏的认知和大量主观臆断，欢迎交流，批评指正。为什么要做这个？​ 首先给不熟悉背景的同学提供一点上下文，简单介绍一下，Appium和RobotFramework是什么。A..." } ]
